<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="RulesBuilderDemo.js" application="/csp/rulesbuilder/" default="1"><![CDATA[

var rulesApp = angular.module('rulesApp', ['ngSanitize'])

.directive('convertToNumber', function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attrs, ngModel) {
      ngModel.$parsers.push(function(val) {
        return parseInt(val, 10);
      });
      ngModel.$formatters.push(function(val) {
        return '' + val;
      });
    }
  }
});
	
hostURL = function(domain) {
	 if (!domain) { domain = ':domain'; }
	return location.href.split('/').slice(0,-1).join('/')+'/rbREST/Domain/'+domain+'/';
};

rulesApp.controller('DomainController', ['$scope', '$filter', '$sce', function($scope, $filter, $sce) {
	
	// initialize ikDomain
	function initDomain() {
	var domain = location.search.substr(1).split('#')[0];
	if (!isNaN(parseInt(domain))) return parseInt(domain);
	var regexp = /^([0-9]+)/;
	var parsed = regexp.exec(domain);
	if (parsed && (parsed.length>0) && !isNaN(parseInt(parsed[0]))) return parsed[0];
		alert('No domain specified in URL!'); 
		return 0;
	}
	$scope.ikDomain = initDomain();
	$scope.mode = 'paragraph';
   	
	$scope.getRuleDefs = function (string) {
     	$.get(hostURL($scope.ikDomain)+'RuleDefinitions', function(data) {
			$scope.ruleDefs = data.RuleDefinitions;
			$scope.$apply();
		});
	}
	
	$scope.editRuleDef = function (ruleDef) {
		$scope.currentRuleDef = ruleDef;
		$('#ruleDetails').modal('show');
	}
	$scope.dropRuleDef = function(rule) {
		if (!confirm('Are you sure you want to delete rule "'+rule.Name+'"?')) return;
		$.ajax({
	  		url: hostURL($scope.ikDomain)+'RuleDefinitions',
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify( { 'delete': true, 'obj': { 'ID': rule.ID } } ),
  			success: function(data) {
				$scope.getRuleDefs();
       		}
	  	});
	}
	$scope.createRuleDef = function() {
		$scope.currentRuleDef = { 'ID':0, 'Name':'New rule', 'Elements':[] };
		$('#ruleDetails').modal('show');
	}
	$scope.updateRuleDef = function() {
		//console.log($scope.currentRuleDef);
		$.ajax({
	  		url: hostURL($scope.ikDomain)+'RuleDefinitions',
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify( {'update':true, 'obj':$scope.currentRuleDef } ),
  			success: function(data) {
	  			$scope.getRuleDefs();
	  			$('#ruleDetails').modal('hide');
       		}
	  	});
	}
	$scope.addRuleElem = function() {
		var elem = { 'Count': 0, 'Negation': 'N/A', 'Type':'dictionary', 'ItemURI':'ANY' };
		if ($scope.dictionaries && ($scope.dictionaries.length>0)) {
			elem.DictName = $scope.dictionaries[$scope.currentDictionary].name;
		}
		$scope.currentRuleDef.Elements.push(elem);
	}
	$scope.dropRuleElem = function(index) {
		var arr = $scope.currentRuleDef.Elements.slice(0,index);
		$scope.currentRuleDef.Elements = arr.concat($scope.currentRuleDef.Elements.slice(index+1));
	}
	
	$scope.selectExtract = function (extract) {
		$scope.currentRuleExtract = extract;
		$scope.currentRuleExtractHTML = $sce.trustAsHtml(extract.HighlightingResult);
	}
	
	$scope.index = function (text) {
		$scope.paragraphs = [];
		$scope.currentRuleExtract = null;
		$scope.currentRuleExtractHTML = '';
		
		if (text == null) {
			var request = { doc: $scope.parsedText };
			request.doc.documentName = $scope.docName;
		} else if ($scope.docID > 0) {
			var request = { src: $scope.docID, doc: { documentName : $scope.docName } };
		} else {
			var request = { txt: text, doc: { documentName : $scope.docName } };
		}
		//console.log(request);

		$.ajax({
	  		url: hostURL($scope.ikDomain)+'Index',
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify( request ),
  			success: function(data) {
	  			console.log(data);
				$scope.paragraphs = data.paragraphs;
				for (var i = 0; i < $scope.paragraphs.length; i++) {
					$scope.paragraphs[i].done = false;
					$scope.paragraphs[i].fullText = $sce.trustAsHtml(data.paragraphs[i].fullText);
					$scope.paragraphs[i].hasMatches = ($scope.paragraphs[i].matchCount > 0);
					$scope.extract($scope.paragraphs[i]);
				}
				$('#tabi4h').parent().removeClass('disabled');
				$('#tabi5h').parent().removeClass('disabled');
			    $('#tabi4h').click();
       		}
	  	});
	}
	
	$scope.extract = function(par) {
     	$.get(hostURL($scope.ikDomain)+'Extract/'+par.paragraphId+'/'+par.sourceId, function(data) {
			par.rules = data.ExtractionResults;
			par.hasRules = (par.rules.length > 0);
			if (par.hasRules) { 
				par.fullText = $sce.trustAsHtml(par.rules[0].HighlightingResult);
				$scope.$apply();
			}
			$('.ruleDefDetail').popover();
		});
	}
	
	$scope.parse = function (text) {
		$scope.parsedText = null;
		$scope.paragraphs = [];
		$scope.matchedParagraphs = null;

		$.ajax({
	  		url: hostURL($scope.ikDomain)+'Parse',
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify( { Text : text } ),
  			success: function(data) {
	  			$scope.parsedText = data;
				$scope.parsedText.formatted = $scope.generateHTMLForChildren(data);
				$scope.$apply();
				$('#tabi3h').parent().removeClass('disabled');
			    $('#tabi3h').click();
       		}
	  	});
	}
	$scope.generateHTMLForChildren = function(doc) {
		if (!doc.children) return '';
		var html = '<table class="formatted-doc">';
		for (var i = 0; i < doc.children.length; i++) {
			html += '<tr><td rowspan="2">'+doc.children[i].key+'</td><td>'+doc.children[i].text+'</td></tr>';
			html += '<tr><td>'+$scope.generateHTMLForChildren(doc.children[i])+'</td></tr>';
		}
		html += '</table>';
		return html;
	}
	
	$scope.toggleValidExtractsOnly = function() {
		$scope.validExtractsOnly = !$scope.validExtractsOnly;
	}
	
	$scope.toggleParagraphHighlight = function(par, r, on) {
		if (on) {
			par.fullText = $sce.trustAsHtml(r.HighlightingResult);
			if (r.SentenceId) {
				$('#par-'+par.paragraphId+'-sent-'+r.SentenceId).css('background-color', 'Gainsboro');
			}
		} else {
			if (r.SentenceId) {
				$('#par-'+par.paragraphId+'-sent-'+r.SentenceId).css('background-color', '');
			}
		}
	}
	
	$scope.greaterThan = function(prop, val){
	    return function(item){
	      return item[prop] > val;
	    }
	}
	
	// initialize
	$scope.docName = 'MyDoc'+Math.round(Math.random()*10000);
	$scope.getRuleDefs();
	
	$scope.elemOrder = '+FirstEntOccId';
	$scope.validExtractsOnly = false;
	
	
	
	// file upload
	$scope.uploadFile = function() {
		var file = document.getElementById('file').files[0];
      	var reader = new FileReader();
      	$scope.docName = file.name;
  		reader.onloadend = function(e){
		    $scope.freeText = e.target.result;
		    $scope.$apply();
		}
  		reader.readAsBinaryString(file);
	};
	
	$scope.dropExtract = function(par, index) {
		var arr = par.rules.slice(0,index);
		par.rules = arr.concat(par.rules.slice(index+1));
	}
	$scope.resetExtract = function(extract) {
		for (var i = 0; i < extract.MatchedElements.length; i++)
			delete extract.MatchedElements[i].status;
	}
	
	// new rule
	$scope.newRule = {  };
	$scope.createRule = function(par, rule) {
		$scope.newRule = { 'paragraph': par, 'documentName': par.documentName };
		if (rule != null) {
			$scope.newRule.ruleDef = rule.RuleDefinition.Name;
			$scope.newRule.extract = rule;
			$scope.newRule.paragraph.plainText = par.fullText;
			$scope.newRule.paragraph.fullText = $sce.trustAsHtml(rule.HighlightingResult);
			$scope.updateRuleString(rule);
		}
		//console.log(par, rule);
		$('#saveModal').modal('show');
	}
	
	$scope.ruleStringMode = 'literal';
	$scope.updateRuleString = function() {
		if (($scope.newRule.rule != null) && ($scope.newRule.rule != '') && ($scope.newRule.rule != $scope.newRule.generatedRule)) {
			if (!confirm('Do you want to overwrite the current rule?')) {
				return;
			}
		}
		
		$scope.newRule.rule = '';
		var arr = $filter('orderBy')($scope.newRule.extract.MatchedElements, $scope.elemOrder);
		for (var i = 0; i < arr.length; i++) {
			var elem = arr[i];
			if (elem.status == 'skip') continue;
			if (((elem.RuleElement.Negation=='rule') || (elem.RuleElement.Negation=='negative')) && elem.Negation) {
				$scope.newRule.rule += 'NOT ';
			}
			$scope.newRule.rule += (($scope.ruleStringMode=='literal') ? elem.Literal : elem.DictionaryTerm.String) +' ';
		}
		// back up to enable warning for overwrite
		$scope.newRule.generatedRule = $scope.newRule.rule;
	}
	
	$scope.savedRules = [];
	$scope.saveRule = function(dropParagraph) {
		var index;
		if ($scope.newRule.index) {
			index = $scope.newRule.index;
		} else {
			index = $scope.savedRules.length;
			$scope.newRule.index = index;
		}
		$scope.savedRules[index] = $scope.newRule;
		$('#saveModal').modal('hide');
		
		if (dropParagraph) {
			$scope.newRule.paragraph.done = true;
			/*var index = -1;
			for (var i = 0; i < $scope.paragraphs.length; i++) {
				if ($scope.paragraphs[i].paragraphId == $scope.newRule.paragraph.paragraphId) {
					index = i;
					break;
				}
			}
			if (index >= 0) {
				var pre = $scope.paragraphs.slice(0,index);
				$scope.paragraphs = pre.concat($scope.paragraphs.slice(index+1));
			}*/
		}
		$scope.newRule = {  };
	}
	
	$scope.editRule = function(r) {
		$scope.newRule = r;
		$('#saveModal').modal('show');
	}
	$scope.dropRule = function(index) {
		var arr = $scope.savedRules.slice(0,index);
		$scope.savedRules = arr.concat($scope.savedRules.slice(index+1));
	}
	
	
	// paragraph filtering
	$scope.paragraphs = [];
	$scope.parSelect = 'rule';
	$scope.parFilter = { 'hasRules': true, 'done': false };
	$scope.parSearch = '';
	$scope.toggleParSelect = function(v) {
		$scope.parSelect = v;
		$scope.parFilter = { $:$scope.parFilter.$, 'done':false };
		switch(v) {
			case 'match':
				$scope.parFilter.hasMatches = true;
				break;
			case 'rule':
				$scope.parFilter.hasRules = true;
				break;
			default:
				break;
		}
	}
	
	$scope.downloadRules = function() {
		
		var data = 'location;rule name;extract;full text;score';
		for (var i in $scope.savedRules) {
			var r = $scope.savedRules[i];
			data += '\n'+r.paragraph.fullKey+';'+r.ruleDef+';'+r.rule+';'+r.paragraph.fullText+';'+(r.extract ? r.extract.Score : '');
		}
		
	    var uri = 'data:text/csv;charset=utf-8,' + escape(data);
	    
	    // generate a temp <a /> tag to ensure the downloading works well on all browsers
	    var link = document.createElement("a");    
	    link.href = uri;
	    link.style = "visibility:hidden";
	    link.download = "ExtractedRules.csv";
	    document.body.appendChild(link);
	    link.click();
	    document.body.removeChild(link);
	}
	
	$scope.selectEntity = function (entity) {
		$.ajax({
	  		url: hostURL($scope.ikDomain)+'Sentences/Entity',
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify( { entity:entity, 'test':'ok' } ),
  			success: function(data) {
				$scope.sentences = data.Sentences;
				$scope.$apply();
       		}
	  	});
	}
	
	$scope.getDictItems = function(dname) {
		for (d in $scope.dictionaries) {
			if (dname == $scope.dictionaries[d].name) {
				return $scope.dictionaries[d].items;
			}
		}
	}



// INHERIT FROM DictionaryBuilder.js
//	1: copy entire contents of DictionaryBuilder.js below
//  2: get rid of 
//		var dictApp = angular.module('dictApp' ...
//		hostURL = function() { ...
// 		function initDomain() { ...
//  3: remove controller definition "opener", so we just add onto the existing one started above
//  4: search-and-replace dictApp >> rulesApp
//	5: set $scope.getMatches = false;

	
	$scope.getBlacklists = function() {
     	$.get(hostURL($scope.ikDomain)+'Blacklists', function(data) {
			if ((data.blacklists==undefined) || (data.blacklists.length==0)) {
				$scope.blacklists = [{ name:'Default blacklist', entries:[]}];
			} else {
				$scope.blacklists = data.blacklists;
			}
			$scope.$apply();
		});
	}
	$scope.blacklists = [];
	$scope.getBlacklists();
	$scope.currentBlacklist = 0;
	$scope.addToBlacklist = function(data) {
		$scope.blacklists[$scope.currentBlacklist].entries.push(data);
		
		// to avoid a server query, remove from entity list
		for (e in $scope.entities) {
			if ($scope.entities[e].EntityValue == data) {
				$scope.entities[e].skip = true;
			}
		}
	}
	$scope.removeFromBlacklist = function(entry) {
		var arr = $scope.blacklists[$scope.currentBlacklist].entries;
		var index = $arr.indexOf(entry);
		$scope.blacklists[$scope.currentBlacklist].entries = arr.slice(0,index).concat(arr.slice(index+1));
	}
	$scope.selectBlacklist = function(index) {
		if ((index < $scope.blacklists.length) && (index >= 0)) {
			$scope.currentBlacklist = index;
		}
	}
	
	$scope.getMatches = false;
	$scope.getEntities = function (string, overrideGetMatches) {
		var bl = ($scope.blacklists.length > $scope.currentBlacklist) ? [$scope.blacklists[$scope.currentBlacklist].id] : [];
	  	$.ajax({
	  		url: hostURL($scope.ikDomain)+'Entities',
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify( {entity:string, blacklists:bl, getMatches:$scope.getMatches || overrideGetMatches} ),
  			success: function(data) {
				$scope.entities = data.Entities;
				$scope.$apply();
       		}
	  	});
	};
	$scope.getEntities("");
	
	$scope.typeEntity = function(event, overrideGetMatches) {
		if (event && ((event.keyCode==13) || (event.which==13))) {
			$scope.getEntities($scope.term, overrideGetMatches);
		}
	}
	
	
	$scope.getSources = function() {
     	$.get(hostURL($scope.ikDomain)+'Sources', function(data) {
	     	$scope.sources = data.sources;
		});
	}
	$scope.getSources();
	$scope.getSourceText = function() {
		if ($scope.docID) {
			$.get(hostURL($scope.ikDomain)+'Sources/'+$scope.docID, function(data) {
				$scope.freeText = data.text;
				$scope.$apply();
			});
		}
	}
	
	$scope.getDictionaries = function() {
     	$.get(hostURL($scope.ikDomain)+'Dictionaries', function(data) {
	     	$scope.dictionaries = data.dictionaries;
			if (!$scope.dictionaries) $scope.dictionaries = [];
			$scope.$apply();
		});
	}
	$scope.getDictionaries();
	$scope.currentDictionary = 0;
	$scope.currentItem = {};
	$scope.createDictionary = function() {
		$scope.dictionaries.push({ name: $scope.dictName, items: []});
		$scope.dictName='';
	}
	$scope.selectDictionary = function(index) {
		if ((index < $scope.dictionaries.length) && (index >= 0))
			$scope.currentDictionary = index;
	}
	$scope.editDict = function(index) {
		$scope.currentDictionary = index;
		$('#modDict').modal('show');
	}
	$scope.dropDict = function(index) {
		var arr = $scope.dictionaries.slice(0,index);
		$scope.dictionaries = arr.concat($scope.dictionaries.slice(index+1));
		$('#modDict').modal('hide');
	}
	$scope.saveDict = function() {
		$('#modDict').modal('hide');
	}
	
	$scope.addTerm = function(term, item) {
		item.terms[item.terms.length] = { string: term };
		var sc = $scope.updateMatchScores(term);
		$scope.$apply();
	}
	$scope.updateMatchScores = function(term) {
		for (e in $scope.entities) {
			var ent = $scope.entities[e];
			if (!ent.Matches) ent.Matches = [];
			if (ent.EntityValue == term) {
				ent.Matches.push({Dict:$scope.currentDictionary, Score:1});
				ent.HighestScore = 1;
			} else if (''.concat(ent.EntityValue).indexOf(term)>=0) { // quick best-effort lookup
				ent.Matches.push({Dict:$scope.currentDictionary, Score:1});
				if (ent.HighestScore < 1) {
					ent.HighestScore = 0.5;
				}
			}
		}
	}
	
	$scope.selectItem = function(item, newTerm) {
		$scope.currentItem = item;
		if (newTerm) { 
			$scope.currentItem.terms.push({ string: newTerm }); 
			$scope.$apply();
		}
		$('#modItem').modal('show');
		if (newTerm) {
			setTimeout(function() { $('.isc-term-string').last().get(0).focus() }, 500);
		}
	}
	$scope.newItem = function(term, saveImmediately) {
		$scope.currentItem = {  name: term, 
								uri: ':'+$scope.dictionaries[$scope.currentDictionary].name+':'+term, 
								terms: [{string:term}],
								isNew : !saveImmediately};
		if (saveImmediately) {
			$scope.dictionaries[$scope.currentDictionary].items.push($scope.currentItem);
			var sc = $scope.updateMatchScores(term);
		} else {
			$('#modItem').modal('show');
		}
		if (term != '') $scope.$apply();
	}
	$scope.saveItem = function() {
		if ($scope.currentItem.isNew) {
			$scope.currentItem.isNew = false;
			$scope.dictionaries[$scope.currentDictionary].items.push($scope.currentItem);
		}
		$('#modItem').modal('hide');
	}
	$scope.dropTerm = function(index) {
		var arr = $scope.currentItem.terms.slice(0,index);
		$scope.currentItem.terms = arr.concat($scope.currentItem.terms.slice(index+1));
	}
	$scope.dropItem = function(item) {
		var arr = [];
		for (i in $scope.dictionaries[$scope.currentDictionary].items) {
			var ii = $scope.dictionaries[$scope.currentDictionary].items[i];
			if (ii.uri != item.uri) {
				arr.push(ii);
			}
		}
		$scope.dictionaries[$scope.currentDictionary].items = arr;
		$('#modItem').modal('hide');
	}
	
	
	$scope.saveAll = function() {
	  $.ajax({
	  		url: hostURL($scope.ikDomain)+'Dictionaries',
	  		method: 'POST',
	  		contentType: 'application/json; charset=UTF-8',
	  		data: JSON.stringify( {'dictionaries':$scope.dictionaries, 'blacklists':$scope.blacklists} ),
  			success: function(data) {
				$scope.getDictionaries();
				$scope.getBlacklists();
				$scope.getEntities($scope.term);
				alert("Dictionaries saved succesfully");
       		}
	  });
	}
	
	$scope.filterEntities = function(prop){
	    return function(item){
		  if (item.HighestScore == null) return true;
	      return (item.HighestScore < $scope.entFilter) && !item.skip;
	    }
	}
	$scope.entFilter = 2;
}]);



var _isc_drag_scroll = false;
rulesApp.directive('iscDraggable', function($document) {
	
	var mouseX, mouseY;
    $document.on("dragover", function(event){
      mouseY = event.originalEvent.clientY;
    });
    
    return {
        scope: {
	        data: '@iscDraggable'
	    },
	    link : function(scope, element, attr) {
		    
	        // this gives us the native JS object
	        var el = element[0];

	        el.draggable = true;

	        el.addEventListener(
	            'dragstart',
	            function(e) {
	                e.dataTransfer.effectAllowed = 'move';
	                e.dataTransfer.setData('DragValue', scope.data);
	                var targets = $('.isc-droppable');
	                targets.filter('.btn').removeClass('btn-default').addClass('btn-info');
	                targets.filter('tr').addClass('info');
	                targets.filter('.panel-body').addClass('bg-info');
	                return false;
	            },
	            false
	        );
	        
	        el.addEventListener(
	            'dragend',
	            function(e) {
		            _isc_drag_scroll = false;
	                var targets = $('.isc-droppable');
	                targets.filter('.btn').removeClass('btn-info').addClass('btn-default');
	                targets.filter('tr').removeClass('info');
	                targets.filter('.panel-body').removeClass('bg-info');
	                return false;
	            },
	            false
	        );
	        
	        el.addEventListener(
	        	'drag',
	        	function(e) {
		        	_isc_drag_scroll = false;
			        if (mouseY < 50) {
			            _isc_drag_scroll = true;
			            _iscDragScroll(-1);
			        }
			        if (mouseY > (window.innerHeight - 50)) {
			            _isc_drag_scroll = true;
			            _iscDragScroll(1);
			        }
	        	}
	        );
    	}
    }
});

_iscDragScroll = function(step) {
    var scrollY = $(window).scrollTop();
    $(window).scrollTop(scrollY + step);
    if (_isc_drag_scroll) {
        setTimeout(function () { _iscDragScroll(step) }, 20);
    }
}

rulesApp.directive('iscDroppable', function() {
    return {
        scope: {
	        dropFunction: '&iscDroppable',
	        dragEnterFunction: '&iscDragEnter'
	    },
        link: function(scope, element) {
            // again we need the native object
            var el = element[0];
            
            el.addEventListener(
			    'dragover',
			    function(e) {
			        e.dataTransfer.dropEffect = 'move';
			        // allows us to drop
			        if (e.preventDefault) e.preventDefault();
			        return false;
			    },
			    false
			);
			
			el.addEventListener(
			    'dragenter',
			    function(e) {
			        //this.classList.add('over');
			        var sc = scope.dragEnterFunction({data: e.dataTransfer.getData('DragValue')});
			        scope.$apply();
			        return false;
			    },
			    false
			);
			
			el.addEventListener(
			    'drop',
			    function(e) {
			        // Stops some browsers from redirecting.
			        if (e.stopPropagation) e.stopPropagation();
	                var sc = scope.dropFunction({data: e.dataTransfer.getData('DragValue')});
	                scope.$apply();
			        return false;
			    },
			    false
			);
        }
    }
});]]></CSP>
</Export>
